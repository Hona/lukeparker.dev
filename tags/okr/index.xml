<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OKR on lukeparker.dev</title><link>https://www.lukeparker.dev/tags/okr/</link><description>Recent content in OKR on lukeparker.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 03 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.lukeparker.dev/tags/okr/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Beautiful OKR with AntBlazor - Part 2</title><link>https://www.lukeparker.dev/posts/building-a-beautiful-okr-with-antblazor/2/</link><pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.lukeparker.dev/posts/building-a-beautiful-okr-with-antblazor/2/</guid><description>Planning the Backend There is one objective with many key results. I added some properties that I think will be useful. These may change as we figure out the UI/UX a bit more.
Some feature ideas:
Objectives should be toggleable if they are active or not Objectives should have a start and end date Objectives should have a brief title, and a longer description Key Results should have a brief title, and a longer description Key Results should be toggleable if they are active or not Key Results should have a completion percent 0%-100% Key Results should have a priority (higher the number the more important) public class Objective { public Guid Id { get; set; } public string Title { get; set; } public string Description { get; set; } public DateTime DueDate { get; set; } public DateTime StartDate { get; set; } public bool Active { get; set; } } public class KeyResult { public Guid Id { get; set; } public Guid ObjectiveId { get; set; } public string Title { get; set; } public string Description { get; set; } public bool Active { get; set; } public decimal Completion { get; set; } public int Priority { get; set; } } That&amp;rsquo;s it for the core models!</description></item><item><title>Building a Beautiful OKR with AntBlazor - Part 1</title><link>https://www.lukeparker.dev/posts/building-a-beautiful-okr-with-antblazor/1/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.lukeparker.dev/posts/building-a-beautiful-okr-with-antblazor/1/</guid><description>Boilerplate GitHub Create a repository called OKR, and initialize it with only a README.md file Open GitHub Desktop, and clone the repository to your machine Folder Structure The physical folder structure will be:
OKR │ README.md │ Docker Related files | .sln │ ... | └───src │ └─── ... (Projects e.g. &amp;#39;OKR.Web&amp;#39;) │ .csproj │ Dockerfile │ ... Setup Solution + Projects Open the folder in the file explorer, and Shift + Right Click -&amp;gt; Open PowerShell window here.</description></item><item><title>Building a Beautiful OKR with AntBlazor - Part 0</title><link>https://www.lukeparker.dev/posts/building-a-beautiful-okr-with-antblazor/0/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.lukeparker.dev/posts/building-a-beautiful-okr-with-antblazor/0/</guid><description>Introduction Why? There are many boilerplate Blazor examples everywhere online, showing the basics, and some more intricate parts. However, I am yet to find a full blog series showing end-to-end, how to make a beautiful UI and clean coded backend &amp;lsquo;real world&amp;rsquo; website with Blazor
The Idea For this series I decided that a reasonably simple but more complex than the typical TODO app, is an OKR website. If you aren&amp;rsquo;t familiar with what an OKR tracker is, it stands for objectives and key results.</description></item></channel></rss>